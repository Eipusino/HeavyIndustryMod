package heavyindustry.world.blocks.defense;

import arc.audio.Sound;
import arc.graphics.Color;
import arc.graphics.g2d.Draw;
import arc.math.Mathf;
import arc.util.Align;
import arc.util.Strings;
import arc.util.Time;
import mindustry.content.Fx;
import mindustry.entities.Damage;
import mindustry.entities.Effect;
import mindustry.game.Team;
import mindustry.gen.Building;
import mindustry.gen.Sounds;
import mindustry.graphics.Drawf;
import mindustry.graphics.Layer;
import mindustry.graphics.Pal;
import mindustry.ui.Fonts;
import mindustry.world.Block;
import mindustry.world.Tile;
import mindustry.world.blocks.storage.CoreBlock.CoreBuild;

import static mindustry.Vars.player;
import static mindustry.Vars.tilesize;

public class Explosive extends Block {
	/** Explosion radius. 1 is equivalent to 1 grid. */
	public int range = 5;
	public Effect explosionEffect = Fx.scatheExplosion;
	public Effect smokeEffect = Fx.titanSmoke;
	/** The color of the effect produced by the explosion. */
	public Color explosionColor = Pal.redSpark;
	public Sound explosionSound = Sounds.explosionbig;
	/** The vibration generated by the explosion. */
	public float explosionShake = 10f;
	/** Countdown to the explosion. */
	public float explosionTime = 180f;
	/** The font color for the countdown to the explosion. */
	public Color counterColor = Pal.redSpark;
	public float damage = 2000f;

	public Explosive(String name) {
		super(name);
		solid = true;
		update = true;
	}

	@Override
	public void drawPlace(int x, int y, int rotation, boolean valid) {
		super.drawPlace(x, y, rotation, valid);
		Drawf.dashCircle(x * 8, y * 8, range * 8, player.team().color);
	}

	@Override
	public boolean canPlaceOn(Tile tile, Team team, int rotation) {
		// no blowing up the core.
		for (CoreBuild core : team.data().cores) {
			if (tile.within(core, range * tilesize * 3)) return false;
		}

		return true;
	}

	public class ExplosiveBuild extends Building {
		public float counter;

		@Override
		public void created() {
			counter += explosionTime;
		}

		@Override
		public void draw() {
			super.draw();
			Draw.z(Layer.endPixeled);
			if (counter < 180f)
				Fonts.def.draw(Strings.fixed(Mathf.ceil(counter / 60f), 0), x, y + 2, counterColor, 0.2f, false, Align.center);
		}

		@Override
		public void updateTile() {
			if (counter <= 0) {
				detonate();
				tile.remove();
			}

			//TODO Some people may want to detonate explosives after inputting them?
			if (canConsume()) counter -= Time.delta;
		}

		public void detonate() {
			Effect.shake(explosionShake, explosionShake, this);

			if (destroyBullet != null) {
				destroyBullet.create(this, Team.derelict, x, y, 0);
			} else {
				explosionSound.at(this);
				explosionEffect.at(x, y, explosionColor);
				smokeEffect.at(x, y, explosionColor);
				Damage.damage(Team.derelict, x, y, range * tilesize * 2, damage); // damage nearby units
			}
		}

		@Override
		public void afterDestroyed() {
			detonate();
		}
	}
}
